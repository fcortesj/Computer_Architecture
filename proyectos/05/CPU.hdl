// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
// Modified: Felipe Cortes Jaramillo

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
        // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
        //         A|M instrucionts ALU  A  D  M JLT JEQ JGT
        // Decode the Instruction  

        //If type A -> 1 or type C -> 0
        Not(in=instruction[15], out=nInstr);
        // We chose if the instruction is a type A or type C based on the MSB negated
        Mux16(a=outALU, b=instruction, sel=nInstr, out=inAReg);
        //Then if type A the MSB bit tell us else if type C and we gonna store in A intruction[5] tell us the final location
        Or(a=nInstr, b=instruction[5], out=loadA);
        //Then we determinate if we are going to load it or not and if yes, we only load 15 for the address
        ARegister(in=inAReg, load=loadA, out=outAReg, out[0..14]=addressM);



        //Then if is a type C and M control bit(intruction[12] is on then we load M) otherwise load A
        And(a=instruction[15], b=instruction[12], out=AoM);
        // We indicate if the data is an A or a M data with that control bit
        Mux16(a=outAReg,b=inM, sel=AoM, out=outAoM);

        //We implement the ALU which all flags in type C are all 6 bits in charge of the operation [6..11]     
        ALU(x=outDReg, y=outAoM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);



        //We indicate if the resul if type C and store to D (instruction[4]) we store in D, else we dont in type A
        And(a=instruction[15], b=instruction[4], out=loadD);
        //Then we load D up
        DRegister(in=outALU, load=loadD, out=outDReg);



        //If type C and store to M(intruction[3]) then we writeM
        And(a=instruction[15], b=instruction[3], out=writeM);


        //PC Implementation
        Not(in=zr, out=Nzr);
        Not(in=ng, out=Nng);
        //We check if we are in type C and JGT(Instruction[0])
        And(a=instruction[15], b=instruction[0], out=jgt);
        //If the result is positive(Nng) and is not Zero(Nzr) then its ok
        And(a=Nzr, b=Nng, out=jgtCond);
        And(a=jgt, b=jgtCond, out=jumpJGT);

        //We check if we are in type C and JEQ(Instruction[1])
        And(a=instruction[15], b=instruction[1], out=jeq);
        //If the result is zero(zr) means we are good
        And(a=jeq, b=zr, out=jumpJEQ);

        //We check if we are in type C and JLT(Instruction[2])
        And(a=instruction[15], b=instruction[2], out=jlt);
        //If the result is negative(ng) means we are good
        And(a=jlt, b=ng, out=jumpJLT);

        //Finally we check if there is a jump condition that it aplicable
        Or(a=jumpJGT, b=jumpJEQ, out=JGTandJEQ);
        Or(a=JGTandJEQ, b=jumpJLT, out=loadJumpPC);
        
        //We run the pc with the final jump or if jump is 0 we just add 1 to PC and we can reset it
        PC(in=outAReg, load=loadJumpPC, inc=true, reset=reset, out[0..14]=pc);

        
}