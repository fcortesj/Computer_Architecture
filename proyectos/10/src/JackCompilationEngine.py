"""
    This module contains the compilation engine of the program
    By: Felipe Cortes Jaramillo
"""
from JackTokenizer import JackTokenizer

class JackCompilationEngine:

    """
    Effects the actual compilation output. Gets its input from a JackTokenizer and emits its parsed structure into an output file/stream. 
    The output is generated by a series of compilexxx() routines, one for every syntactic element xxx of the Jack grammar. 

    The contract between these routines is that each compilexxx() routine should read the syntactic construct xxx from the input, advance() the tokenizer exactly beyond xxx, and output the parsing of xxx. 
    Thus, compilexxx()may only be called if indeed xxx is the next syntactic element of the input.
    """

    def __init__ (self, inputFile, outputFile):
        """ Constructor => This method creates a new compilation engine with the given input and output """
        self.lex = JackTokenizer(inputFile)
        self.lex.tokenize()
        self.outputFile = open(outputFile, 'w')
        self.indentCount = 0

    def __del__(self):
        """ Destructor of the class """
        del self.lex
        self.outputFile.close()

    def compileClass(self):
        """ This method compiles a complete class """
        if self.lex.hasMoreTokens():
            #Read class token
            self.lex.advance()
            if self.lex.tokenType() == "KEYWORD":
                if self.lex.keyword() == "CLASS":
                    self.writeOpenTag("class")


                else:
                    self.badFlow(self.lex.keyword().lower(), "class")
            else:
                self.badFlow(self.lex.tokenType(), "KEYWORD")
        else:
            self.noMoreTokens()


    def writeOpenTag(self, tag):
        """ This method write the open tag of a derivation """
        self.outputFile.write('{}<{}>\n'.format(self.currentIndent(), tag))
        self.increaseIndent()

    def writeCloseTag(self, tag):
        """ This method writes the close tag of an opened derivation """
        self.decreaseIndent()
        self.outputFile.write('{}</{}>\n'.format(self.currentIndent(), tag))

    def increaseIndent(self):
        """ This method increases the indentation """
        self.indentCount += 1

    def decreaseIndent(self):
        """ This method decreases the indentation """
        self.indentCount -= 1

    def currentIndent(self):
        """ This method returns the current identation """
        return '  ' * self.indentCount

    def badFlow(self, token, expected):
        """ Handles errors """
        print("ERROR: Program structure is wrong. Token [{}] invalid, expected [{}]".format(token, expected))
        exit(-1)

    def noMoreTokens(self):
        """ Handles errors """
        print("ERROR: There are no more tokens")
        exit(-1)
